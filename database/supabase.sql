/* ===========================================================
   ðŸ“Œ Table: schools
   Stores all schools (tenants) registered in the platform.
   =========================================================== */
create table public.schools (
  id uuid not null default gen_random_uuid (),
  name character varying not null,
  legal_name character varying null,
  city character varying null,
  logo_url text null,
  created_at timestamp with time zone null default now(),
  constraint schools_pkey primary key (id)
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: users
   All platform users (admins, teachers, students, guardians).
   Linked to Supabase Auth and schools.
   =========================================================== */
create table public.users (
  id uuid not null default gen_random_uuid (),
  school_id uuid null,
  auth_user_id uuid null,
  email public.citext not null,
  phone text null,
  first_name text not null,
  last_name text not null,
  status public.user_status not null default 'active'::user_status,
  last_login_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  search_tsv tsvector GENERATED ALWAYS as (
    to_tsvector(
      'simple'::regconfig,
      (
        (
          (
            (
              (
                (COALESCE(first_name, ''::text) || ' '::text) || COALESCE(last_name, ''::text)
              ) || ' '::text
            ) || COALESCE((email)::text, ''::text)
          ) || ' '::text
        ) || COALESCE(phone, ''::text)
      )
    )
  ) STORED null,
  password text null,
  role text null,
  class_id uuid null,
  constraint users_pkey primary key (id),
  constraint users_auth_user_id_key unique (auth_user_id),
  constraint users_email_key unique (email),
  constraint users_auth_user_id_fkey foreign KEY (auth_user_id) references auth.users (id) on delete CASCADE,
  constraint users_class_id_fkey foreign KEY (class_id) references classes (id),
  constraint users_school_id_fkey foreign KEY (school_id) references schools (id) on delete CASCADE
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: todolist
   Personal todo items created by users (simple tasks).
   =========================================================== */
create table public.todolist (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid null,
  data text null,
  status boolean null,
  constraint todolist_pkey primary key (id),
  constraint todolist_user_id_fkey foreign KEY (user_id) references users (id)
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: subjects
   School subjects (e.g., Math, Physics, History).
   =========================================================== */
create table public.subjects (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  school_id uuid null,
  name text null,
  constraint subjects_pkey primary key (id),
  constraint subjects_school_id_fkey foreign KEY (school_id) references schools (id)
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: classes
   Academic classes/groups within schools (e.g., 2Ã¨me MIP A).
   =========================================================== */
create table public.classes (
  id uuid not null default gen_random_uuid (),
  school_id uuid not null,
  level_id uuid null,
  name text not null,
  room text null,
  constraint classes_pkey primary key (id),
  constraint classes_school_id_fkey foreign KEY (school_id) references schools (id) on delete CASCADE
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: teacher_subjects
   Junction: which teacher teaches which subject.
   =========================================================== */
create table public.teacher_subjects (
  id bigserial not null,
  created_at timestamp with time zone not null default now(),
  teacher_id uuid not null,
  subject_id uuid not null,
  school_id uuid null,
  constraint teacher_subjects_pkey primary key (id),
  constraint teacher_subjects_unique unique (teacher_id, subject_id),
  constraint teacher_subjects_school_id_fkey foreign KEY (school_id) references schools (id),
  constraint teacher_subjects_subject_id_fkey foreign KEY (subject_id) references subjects (id) on delete CASCADE,
  constraint teacher_subjects_teacher_id_fkey foreign KEY (teacher_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: teacher_classes
   Junction: teacher assignments to classes.
   =========================================================== */
create table public.teacher_classes (
  id bigserial not null,
  created_at timestamp with time zone not null default now(),
  teacher_id uuid not null,
  class_id uuid not null,
  school_id uuid null,
  constraint teacher_classes_pkey primary key (id),
  constraint teacher_classes_unique unique (teacher_id, class_id),
  constraint teacher_classes_class_id_fkey foreign KEY (class_id) references classes (id) on delete CASCADE,
  constraint teacher_classes_school_id_fkey foreign KEY (school_id) references schools (id),
  constraint teacher_classes_teacher_id_fkey foreign KEY (teacher_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: posts
   News, announcements, or posts authored by users.
   Can target school, all classes, or a specific class.
   =========================================================== */
create table public.posts (
  id bigserial not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  school_id uuid not null,
  user_id uuid not null,
  title text not null,
  body_html text null,
  audience public.post_audience not null,
  class_id uuid null,
  status text not null default 'published'::text,
  constraint posts_pkey primary key (id),
  constraint posts_class_id_fkey foreign KEY (class_id) references classes (id) on delete set null,
  constraint posts_school_id_fkey foreign KEY (school_id) references schools (id) on delete CASCADE,
  constraint posts_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: post_attachments
   Files (PDF, Word, images, etc.) attached to posts.
   =========================================================== */
create table public.post_attachments (
  id bigserial not null,
  post_id bigint not null,
  url text not null,
  filename text null,
  size_bytes bigint null,
  created_at timestamp with time zone not null default now(),
  media_type public.media_type not null default 'other'::media_type,
  constraint post_attachments_pkey primary key (id),
  constraint post_attachments_post_id_fkey foreign KEY (post_id) references posts (id) on delete CASCADE
) TABLESPACE pg_default;


/* ===========================================================
   ðŸ“Œ Table: post_comments
   Comments authored by users on posts (supports threading via parent_id).
   =========================================================== */
create table public.post_comments (
  id bigserial primary key,
  post_id bigint not null references public.posts (id) on delete cascade,
  user_id uuid not null references public.users (id) on delete cascade,
  parent_id bigint null references public.post_comments (id) on delete cascade,
  body text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint post_comments_parent_chk check (parent_id is null or parent_id <> id)
) TABLESPACE pg_default;

create index post_comments_post_parent_idx
  on public.post_comments (post_id, parent_id, created_at);


/* ===========================================================
   ðŸ“Œ Table: post_votes
   Stores up/down votes per user on posts.
   =========================================================== */
create table public.post_votes (
  id bigserial primary key,
  post_id bigint not null references public.posts (id) on delete cascade,
  user_id uuid not null references public.users (id) on delete cascade,
  value smallint not null check (value in (1, -1)),
  created_at timestamptz not null default now(),
  constraint post_votes_unique unique (post_id, user_id)
) TABLESPACE pg_default;

create index post_votes_post_id_idx on public.post_votes (post_id);


/* ===========================================================
   ðŸ“Œ Table: post_comment_votes
   Up/down votes on individual comments.
   =========================================================== */
create table public.post_comment_votes (
  id bigserial primary key,
  comment_id bigint not null references public.post_comments (id) on delete cascade,
  user_id uuid not null references public.users (id) on delete cascade,
  value smallint not null check (value in (1, -1)),
  created_at timestamptz not null default now(),
  constraint post_comment_votes_unique unique (comment_id, user_id)
) TABLESPACE pg_default;

create index post_comment_votes_comment_idx on public.post_comment_votes (comment_id);


/* ===========================================================
   ðŸ“Œ Table: courses
   Courses offered in schools (ties subjects, teachers, classes).
   =========================================================== */
create table public.courses (
  id uuid not null default gen_random_uuid (),
  school_id uuid not null,
  code text null,
  category text null,
  level_id uuid null,
  class_id uuid null,
  year_id uuid null,
  status public.course_status not null default 'draft'::course_status,
  created_by uuid null,
  archived_at timestamp with time zone null,
  matieres_id bigint null,
  title text null,
  subject_id uuid null,
  teacher_id uuid null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  search_tsv tsvector GENERATED ALWAYS as (
    to_tsvector('simple'::regconfig, COALESCE(title, ''::text))
  ) STORED null,
  constraint courses_pkey primary key (id),
  constraint courses_class_id_fkey foreign KEY (class_id) references classes (id),
  constraint courses_created_by_fkey foreign KEY (created_by) references users (id),
  constraint courses_school_id_fkey foreign KEY (school_id) references schools (id) on delete CASCADE,
  constraint courses_subject_id_fkey foreign KEY (subject_id) references subjects (id) on delete RESTRICT,
  constraint courses_teacher_id_fkey foreign KEY (teacher_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;
